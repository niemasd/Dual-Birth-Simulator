#! /usr/bin/env python3
'''
Niema Moshiri 2017

Generate plots of run-time of original algorithm Python implementation vs.
new algorithm C++ implementation.
'''
# imports
from matplotlib import rcParams
from matplotlib.collections import PolyCollection
from matplotlib.patches import Patch
from os.path import realpath
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'old_r_neg_4':'#FF9999', 'new_r_neg_4':'#FF0000', 'old_r0':'#9999FF', 'new_r0':'#0000FF'}
handles = [Patch(color=pal['old_r_neg_4'],label=r'Original $\left( r=10^{-4} \right)$'), Patch(color=pal['new_r_neg_4'],label=r'New $\left( r=10^{-4} \right)$'), Patch(color=pal['old_r0'],label=r'Original $\left( r=1 \right)$'), Patch(color=pal['new_r0'],label=r'New $\left( r=1 \right)$'),]
def avg(x):
    return float(sum(x))/len(x)
# set alpha transparency for axes
def setAlpha(ax,a):
    for art in ax.get_children():
        if isinstance(art, PolyCollection):
            art.set_alpha(a)

# data
old_r_neg_4 = {
    'n':[1000]*20+[2000]*20+[3000]*20+[4000]*20+[5000]*20+[6000]*20+[7000]*20+[8000]*20+[9000]*20+[10000]*20,
    't':[0.1135,0.10135,0.102,0.1109,0.1007,0.103,0.10315,0.10195,0.10135,0.10215,0.1021,0.1011,0.09965,0.1017,0.10085,0.103,0.10175,0.10065,0.10155,0.10115] + # n = 1000
        [0.19445,0.1934,0.19425,0.1953,0.19545,0.1944,0.19625,0.19575,0.1967,0.19665,0.1976,0.19505,0.19385,0.19345,0.19215,0.19555,0.1954,0.1965,0.19375,0.1962] + # n = 2000
        [0.2873,0.29335,0.29095,0.29075,0.2916,0.29,0.28985,0.28695,0.3041,0.2937,0.2903,0.2934,0.29115,0.2914,0.2901,0.29015,0.2899,0.29075,0.29075,0.2932] + # n = 3000
        [0.39545,0.39475,0.3904,0.3882,0.39045,0.39375,0.3849,0.38585,0.3894,0.39585,0.38515,0.39065,0.39,0.3896,0.39525,0.41015,0.3945,0.3848,0.38815,0.38815] + # n = 4000
        [0.4866,0.4914,0.49435,0.479,0.4867,0.49035,0.48365,0.48165,0.4881,0.49025,0.49195,0.482,0.48715,0.49725,0.4918,0.49285,0.4895,0.4905,0.49095,0.4893] + # n = 5000
        [0.59155,0.5864,0.58755,0.6061,0.5919,0.59215,0.59305,0.5984,0.5978,0.59675,0.59135,0.58935,0.58835,0.6039,0.59955,0.59495,0.5878,0.5874,0.5933,0.584] + # n = 6000
        [0.68795,0.69335,0.6909,0.69415,0.6887,0.70155,0.6885,0.69515,0.6962,0.69355,0.705,0.69115,0.77755,0.69045,0.6965,0.6909,0.68555,0.68285,0.6919,0.68765] + # n = 7000
        [0.7863,0.8515,0.80405,0.78945,0.7945,0.78685,0.7937,0.7897,0.7868,0.794,0.79395,0.7905,0.79535,0.79135,0.7974,0.794,0.79265,0.81135,0.7891,0.79205] + # n = 8000
        [0.89295,0.89305,0.8949,0.90315,0.89565,0.9276,0.8884,0.97915,0.9072,0.88335,0.8798,0.8915,0.90625,0.90495,0.9612,0.90235,0.9828,0.9164,0.989,0.9267] + # n = 9000
        [1.0038,1.00235,1.0181,0.99855,1.00775,1.00895,1.0023,0.998,1.0003,1.0003,0.98805,0.9925,1.00795,1.02305,1.00665,1.0068,1.01575,1.0698,0.99885,0.9919] + # n = 10000
        [],
}
new_r_neg_4 = {
    'n':[1000]*20+[2000]*20+[3000]*20+[4000]*20+[5000]*20+[6000]*20+[7000]*20+[8000]*20+[9000]*20+[10000]*20,
    't':[0.00275,0.0028,0.0028,0.0028,0.0028,0.0028,0.00275,0.0028,0.0028,0.0029,0.0028,0.00275,0.00275,0.0028,0.00275,0.00275,0.0028,0.0028,0.0028,0.0028] + # n = 1000
        [0.0055,0.00545,0.00545,0.00545,0.00545,0.00555,0.00545,0.00545,0.00545,0.0055,0.00545,0.0055,0.00545,0.00545,0.00555,0.0055,0.0055,0.00545,0.00545,0.00545] + # n = 2000
        [0.00825,0.00815,0.0082,0.00815,0.00815,0.00825,0.0082,0.0082,0.0082,0.00815,0.00815,0.00825,0.00815,0.00815,0.0082,0.0081,0.00815,0.0081,0.00815,0.00815] + # n = 3000
        [0.01085,0.01085,0.01095,0.0109,0.01085,0.0109,0.01085,0.0109,0.01085,0.01085,0.01085,0.0109,0.0109,0.01085,0.01095,0.0109,0.01085,0.01095,0.01085,0.01085] + # n = 4000
        [0.0137,0.01365,0.01375,0.01365,0.01375,0.0136,0.01365,0.01365,0.0136,0.0136,0.0137,0.01365,0.0136,0.0136,0.01365,0.0136,0.01365,0.01365,0.01365,0.0136] + # n = 5000
        [0.0169,0.0163,0.01635,0.0164,0.01635,0.01635,0.01635,0.01635,0.01635,0.01635,0.0165,0.01635,0.01645,0.01645,0.0164,0.0163,0.0164,0.01645,0.01645,0.0165] + # n = 6000
        [0.0191,0.01905,0.01895,0.01915,0.019,0.0193,0.0191,0.019,0.019,0.01905,0.019,0.019,0.01905,0.0195,0.01925,0.01905,0.0193,0.019,0.01915,0.01905] + # n = 7000
        [0.02205,0.0222,0.02185,0.0221,0.022,0.0221,0.02215,0.0219,0.02215,0.022,0.02205,0.02195,0.0221,0.02205,0.02205,0.02215,0.0219,0.02205,0.02195,0.02215] + # n = 8000
        [0.0247,0.0247,0.0247,0.0247,0.0249,0.0247,0.02475,0.02495,0.0247,0.0249,0.0247,0.02465,0.0248,0.025,0.0249,0.0248,0.02465,0.0247,0.02475,0.02485] + # n = 9000
        [0.0275,0.02765,0.0275,0.0274,0.02765,0.02765,0.02765,0.02755,0.0274,0.02735,0.02765,0.02765,0.02765,0.0275,0.02785,0.0276,0.0274,0.02765,0.0274,0.0275] + # n = 10000
        [],
}
old_r0 = {
    'n':[1000]*20+[2000]*20+[3000]*20+[4000]*20+[5000]*20+[6000]*20+[7000]*20+[8000]*20+[9000]*20+[10000]*20,
    't':[0.0987,0.1008,0.09955,0.1001,0.0997,0.09955,0.10015,0.0983,0.09975,0.0994,0.0995,0.09955,0.0998,0.10065,0.09815,0.09815,0.09875,0.09975,0.0993,0.101] + # n = 1000
        [0.18795,0.1956,0.19165,0.1917,0.19115,0.1932,0.19195,0.19205,0.1905,0.19105,0.19225,0.18935,0.19085,0.19025,0.2089,0.1896,0.19385,0.1883,0.19105,0.19165] + # n = 2000
        [0.28345,0.28015,0.2824,0.28315,0.28095,0.2801,0.28355,0.28205,0.2828,0.28395,0.28695,0.28225,0.2839,0.2813,0.27945,0.2805,0.2838,0.2816,0.2835,0.2819] + # n = 3000
        [0.3746,0.3766,0.3801,0.37515,0.37405,0.3777,0.3809,0.3751,0.37785,0.378,0.3768,0.37315,0.37535,0.377,0.37705,0.38145,0.3871,0.3911,0.3737,0.3768] + # n = 4000
        [0.47015,0.4682,0.47445,0.4784,0.4677,0.4715,0.471,0.46755,0.47265,0.47195,0.46855,0.4718,0.4701,0.4705,0.46595,0.47555,0.4701,0.48035,0.4761,0.4632] + # n = 5000
        [0.5679,0.5699,0.5644,0.56845,0.57485,0.5674,0.5848,0.5685,0.56635,0.56815,0.5729,0.56635,0.5686,0.56765,0.5675,0.56345,0.5649,0.5666,0.55945,0.57355] + # n = 6000
        [0.6723,0.67455,0.65585,0.6698,0.67055,0.6647,0.65725,0.6612,0.6693,0.66905,0.66385,0.6679,0.6607,0.66275,0.66415,0.6603,0.6691,0.66345,0.6668,0.67075] + # n = 7000
        [0.7521,0.75825,0.77095,0.76205,0.7688,0.75945,0.76475,0.7629,0.7557,0.75825,0.7629,0.7573,0.76265,0.7629,0.7648,0.77285,0.7611,0.76425,0.77775,0.76575] + # n = 8000
        [0.87655,0.86155,0.8565,0.86895,0.86675,0.87135,0.8534,0.86775,0.85595,0.8597,0.85445,0.8552,0.8659,0.85305,0.87005,0.88455,0.86815,0.8651,0.8654,0.87085] + # n = 9000
        [0.9602,0.95375,0.9439,0.97365,0.9562,0.97025,0.95685,0.95785,0.95575,0.97415,0.9499,0.9584,0.96915,0.977,1.06045,0.9574,0.9609,0.9564,0.9645,0.95475] + # n = 10000
        [],
}
new_r0 = {
    'n':[1000]*20+[2000]*20+[3000]*20+[4000]*20+[5000]*20+[6000]*20+[7000]*20+[8000]*20+[9000]*20+[10000]*20,
    't':[0.0027,0.0027,0.0027,0.0027,0.00265,0.00265,0.00265,0.00265,0.00265,0.00265,0.0027,0.0027,0.0027,0.0027,0.0027,0.00265,0.0027,0.00265,0.00265,0.00265] + # n = 1000
        [0.0052,0.0052,0.0053,0.00525,0.00525,0.0052,0.00525,0.00525,0.0052,0.00525,0.0052,0.0052,0.0052,0.0052,0.00525,0.0052,0.00525,0.0052,0.0052,0.0052] + # n = 2000
        [0.0079,0.0079,0.00785,0.0079,0.0079,0.00785,0.0079,0.0079,0.0079,0.00785,0.00785,0.0079,0.0081,0.0079,0.00785,0.0079,0.00795,0.0079,0.00785,0.0078] + # n = 3000
        [0.0104,0.0104,0.01045,0.0106,0.0105,0.01055,0.0104,0.01055,0.01045,0.01055,0.01045,0.01045,0.0104,0.01045,0.0104,0.01055,0.01055,0.01045,0.01055,0.0105] + # n = 4000
        [0.0132,0.01315,0.01325,0.0132,0.01315,0.01325,0.0132,0.01315,0.0132,0.0131,0.01325,0.0132,0.0131,0.01335,0.01315,0.0133,0.01325,0.01325,0.0132,0.0133] + # n = 5000
        [0.0158,0.01585,0.0162,0.01595,0.01585,0.0159,0.0159,0.01585,0.0159,0.016,0.01595,0.01595,0.0158,0.0159,0.0158,0.0161,0.016,0.016,0.01605,0.0159] + # n = 6000
        [0.01865,0.0187,0.0186,0.01865,0.0186,0.0186,0.0185,0.01855,0.01865,0.0185,0.0186,0.0189,0.0185,0.0186,0.0187,0.0188,0.01855,0.0185,0.01865,0.0187] + # n = 7000
        [0.02135,0.02145,0.02155,0.02165,0.0215,0.0215,0.0215,0.02175,0.0215,0.0215,0.0213,0.0215,0.02155,0.02155,0.0213,0.02145,0.0216,0.0216,0.0215,0.02135] + # n = 8000
        [0.02435,0.0245,0.0242,0.0243,0.02425,0.02415,0.02405,0.0243,0.02445,0.0244,0.02445,0.0243,0.0242,0.0243,0.0243,0.0242,0.0244,0.0243,0.0244,0.02425] + # n = 9000
        [0.02715,0.02705,0.02705,0.0271,0.0269,0.0271,0.0271,0.027,0.0271,0.0271,0.02685,0.02705,0.02725,0.02705,0.0269,0.0273,0.02715,0.0273,0.027,0.02685] + # n = 10000
        [],
}

# plot time vs. n
x = [1000,2000,3000,4000,5000,6000,7000,8000,9000,10000]
fig = plt.figure()
ax = sns.pointplot(x='n',y='t',data=pd.DataFrame(new_r_neg_4),color=pal['new_r_neg_4'],linestyles='--')
sns.pointplot(x='n',y='t',data=pd.DataFrame(new_r0),color=pal['new_r0'],linestyles='--')
sns.pointplot(x='n',y='t',data=pd.DataFrame(old_r_neg_4),color=pal['old_r_neg_4'],linestyles='--')
sns.pointplot(x='n',y='t',data=pd.DataFrame(old_r0),color=pal['old_r0'],linestyles='--')
ax.set(yscale="log")
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Number of Leaves $\left( n \right)$',fontsize=14)
sns.plt.ylabel('Time (seconds)',fontsize=14)
sns.plt.title(r'Time vs. Number of Leaves',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('t_vs_n.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()